
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Bancos_satScalarFieldEnum = {
  codigo: 'codigo',
  nombre_corto: 'nombre_corto',
  nombre_completo: 'nombre_completo'
};

exports.Prisma.CategoriasScalarFieldEnum = {
  id: 'id',
  categoria: 'categoria',
  descripcion: 'descripcion'
};

exports.Prisma.Conceptos_nominaScalarFieldEnum = {
  id: 'id',
  clave: 'clave',
  descripcion: 'descripcion',
  grabada: 'grabada',
  smg_exento_cantidad: 'smg_exento_cantidad',
  porcentaje_exencion: 'porcentaje_exencion',
  fijo_variable: 'fijo_variable',
  se_paga: 'se_paga'
};

exports.Prisma.DepartamentosScalarFieldEnum = {
  id: 'id',
  departamento: 'departamento',
  descripcion: 'descripcion',
  jefe_empleado: 'jefe_empleado',
  tipo: 'tipo',
  jefe_nombre: 'jefe_nombre'
};

exports.Prisma.Descuentos_activosScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  tipo: 'tipo',
  tipo_descuento: 'tipo_descuento',
  monto: 'monto',
  fecha_inicio: 'fecha_inicio',
  fecha_fin: 'fecha_fin',
  clave: 'clave',
  saldo: 'saldo',
  numeropago: 'numeropago',
  totalpagos: 'totalpagos'
};

exports.Prisma.Empleado_compensacionScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  tipo: 'tipo',
  compensacion: 'compensacion'
};

exports.Prisma.Empleado_cuenta_bancariaScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  clabe: 'clabe',
  banco: 'banco',
  regimss: 'regimss',
  calimss: 'calimss',
  calispt: 'calispt',
  tipo: 'tipo'
};

exports.Prisma.Empleado_direccionScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  calle: 'calle',
  num_ext: 'num_ext',
  num_int: 'num_int',
  colonia: 'colonia',
  referencia: 'referencia',
  ciudad: 'ciudad',
  codigo_ciudad: 'codigo_ciudad',
  estado: 'estado',
  codigo_estado: 'codigo_estado',
  codigo_postal: 'codigo_postal',
  tipo: 'tipo'
};

exports.Prisma.Empleado_documentacionScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  foto: 'foto',
  credencial_elector: 'credencial_elector',
  licencia: 'licencia',
  cartilla: 'cartilla',
  tipo: 'tipo'
};

exports.Prisma.Empleado_formacion_academicaScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  escuela: 'escuela',
  carrera: 'carrera',
  grado: 'grado',
  termino: 'termino',
  duracion: 'duracion',
  tipo: 'tipo'
};

exports.Prisma.Empleado_informacion_laboralScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  departamento: 'departamento',
  categoria: 'categoria',
  programa: 'programa',
  subprograma: 'subprograma',
  meta: 'meta',
  accion: 'accion',
  municipio: 'municipio',
  nivel: 'nivel',
  puesto: 'puesto',
  sueldo_actual: 'sueldo_actual',
  sueldo_anterior: 'sueldo_anterior',
  sueldo_respaldo: 'sueldo_respaldo',
  estatus: 'estatus',
  tipo_contrato: 'tipo_contrato',
  tipo_empleado: 'tipo_empleado',
  fecha_alta: 'fecha_alta',
  fecha_base: 'fecha_base',
  fecha_ultimo_movimiento: 'fecha_ultimo_movimiento',
  fecha_movimiento: 'fecha_movimiento',
  fecha_baja: 'fecha_baja',
  fecha_terminacion: 'fecha_terminacion',
  fecha_contratacion: 'fecha_contratacion',
  motivo_baja: 'motivo_baja',
  turno: 'turno',
  checa_sn: 'checa_sn',
  cheques_sn: 'cheques_sn',
  clave_presupuestal: 'clave_presupuestal',
  timbrado_enviado: 'timbrado_enviado',
  validez: 'validez',
  tipo: 'tipo'
};

exports.Prisma.Empleado_telefonoScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  fijo: 'fijo',
  celular: 'celular',
  tipo: 'tipo'
};

exports.Prisma.EmpleadosScalarFieldEnum = {
  id: 'id',
  empleado: 'empleado',
  nombre: 'nombre',
  apellido_paterno: 'apellido_paterno',
  apellido_materno: 'apellido_materno',
  curp: 'curp',
  rfc: 'rfc',
  homoclave: 'homoclave',
  sexo: 'sexo',
  estado_civil: 'estado_civil',
  edad: 'edad',
  fecha_nacimiento: 'fecha_nacimiento',
  email: 'email',
  tipo: 'tipo'
};

exports.Prisma.Incidencias_nominaScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  tipo: 'tipo',
  tipo_empleado: 'tipo_empleado',
  tipo_nomina: 'tipo_nomina',
  periodo: 'periodo',
  clave: 'clave',
  importe: 'importe',
  tipo_movimiento: 'tipo_movimiento'
};

exports.Prisma.Niveles_empleadosScalarFieldEnum = {
  id: 'id',
  tipo_empleado: 'tipo_empleado',
  nivel: 'nivel',
  sueldo_mensual: 'sueldo_mensual',
  canasta_basica: 'canasta_basica',
  bono_transporte: 'bono_transporte',
  prevision_social: 'prevision_social',
  fomento_educativo: 'fomento_educativo'
};

exports.Prisma.NominasScalarFieldEnum = {
  id: 'id',
  periodo: 'periodo',
  a_o: 'a_o',
  tipo_nomina: 'tipo_nomina',
  estatus: 'estatus',
  editable: 'editable',
  fecha_cierre: 'fecha_cierre',
  autorizado_por_usuario: 'autorizado_por_usuario',
  autorizado_por_fecha: 'autorizado_por_fecha',
  uuid: 'uuid',
  folio_fiscal: 'folio_fiscal',
  sello_digital: 'sello_digital',
  fecha_timbrado: 'fecha_timbrado'
};

exports.Prisma.Nominas_empleadosScalarFieldEnum = {
  id: 'id',
  nomina_id: 'nomina_id',
  empleado_id: 'empleado_id',
  tipo: 'tipo',
  nombre: 'nombre',
  rfc: 'rfc',
  departamento: 'departamento',
  categoria: 'categoria',
  clabe: 'clabe',
  total_percepciones: 'total_percepciones',
  total_deducciones: 'total_deducciones',
  neto: 'neto'
};

exports.Prisma.Nominas_empleados_incidenciasScalarFieldEnum = {
  id: 'id',
  nomina_empleado_id: 'nomina_empleado_id',
  clave: 'clave',
  descripcion: 'descripcion',
  tipo_movimiento: 'tipo_movimiento',
  importe: 'importe'
};

exports.Prisma.Parametros_nominaScalarFieldEnum = {
  id: 'id',
  smg: 'smg',
  porcentaje_imss: 'porcentaje_imss',
  porcentaje_subsidio: 'porcentaje_subsidio',
  porcentaje_prima_vacacional: 'porcentaje_prima_vacacional',
  porcentaje_prima_dominical: 'porcentaje_prima_dominical',
  total_contrato_isss: 'total_contrato_isss',
  isss_contrato: 'isss_contrato',
  porcentaje_base_isss: 'porcentaje_base_isss',
  porcentaje_base_isss_patron: 'porcentaje_base_isss_patron',
  porcentaje_fondo_pension: 'porcentaje_fondo_pension',
  porcentaje_convenio_adicional: 'porcentaje_convenio_adicional',
  porcentaje_cuota_sindical: 'porcentaje_cuota_sindical',
  dias_aguinaldo: 'dias_aguinaldo',
  dias_aguinaldo_confianza: 'dias_aguinaldo_confianza',
  porcentaje_fondo_pension_patronal: 'porcentaje_fondo_pension_patronal',
  porcentaje_reserva_tece: 'porcentaje_reserva_tece',
  porcentaje_reserva_tecp: 'porcentaje_reserva_tecp',
  porcentaje_accidente_trabajo: 'porcentaje_accidente_trabajo',
  porcentaje_confianza_isss: 'porcentaje_confianza_isss',
  porcentaje_confianza_isss_p: 'porcentaje_confianza_isss_p',
  buena_disponibilidad: 'buena_disponibilidad',
  estimulo: 'estimulo',
  dias_responsabilidad: 'dias_responsabilidad',
  fecha_responsabilidad: 'fecha_responsabilidad'
};

exports.Prisma.Periodos_nominaScalarFieldEnum = {
  id: 'id',
  periodo: 'periodo',
  cerrado: 'cerrado',
  fecha_desde: 'fecha_desde',
  fecha_hasta: 'fecha_hasta',
  fecha_proceso: 'fecha_proceso'
};

exports.Prisma.PrenominasScalarFieldEnum = {
  id: 'id',
  periodo: 'periodo',
  anio: 'anio',
  tipo_nomina: 'tipo_nomina',
  estatus: 'estatus',
  editable: 'editable',
  fecha_creacion: 'fecha_creacion',
  comentarios: 'comentarios'
};

exports.Prisma.Prenominas_empleadosScalarFieldEnum = {
  id: 'id',
  prenomina_id: 'prenomina_id',
  empleado_id: 'empleado_id',
  tipo: 'tipo',
  tipo_empleado: 'tipo_empleado',
  total_percepciones: 'total_percepciones',
  total_deducciones: 'total_deducciones',
  neto: 'neto'
};

exports.Prisma.Prenominas_incidenciasScalarFieldEnum = {
  id: 'id',
  prenomina_empleado_id: 'prenomina_empleado_id',
  clave: 'clave',
  descripcion: 'descripcion',
  tipo_movimiento: 'tipo_movimiento',
  importe: 'importe',
  grabada: 'grabada',
  unidad_exencion: 'unidad_exencion',
  valor_unidad_exencion: 'valor_unidad_exencion'
};

exports.Prisma.Prestaciones_empleadosScalarFieldEnum = {
  id: 'id',
  empleado_id: 'empleado_id',
  tipo: 'tipo',
  tipo_empleado: 'tipo_empleado',
  sueldo_mensual: 'sueldo_mensual',
  sueldo_diario: 'sueldo_diario',
  canasta_basica: 'canasta_basica',
  bono_transporte: 'bono_transporte',
  prevision_social: 'prevision_social',
  fomento_educativo: 'fomento_educativo',
  quinquenio: 'quinquenio',
  aguinaldo_catorcenal: 'aguinaldo_catorcenal',
  sueldo_integrado: 'sueldo_integrado'
};

exports.Prisma.Tabla_isrScalarFieldEnum = {
  id: 'id',
  tipo: 'tipo',
  periodo_fiscal: 'periodo_fiscal',
  limite_inferior: 'limite_inferior',
  limite_superior: 'limite_superior',
  cuota_fija: 'cuota_fija',
  porcentaje_excedente: 'porcentaje_excedente'
};

exports.Prisma.Tipos_empleadoScalarFieldEnum = {
  id: 'id',
  tipo: 'tipo',
  descripcion: 'descripcion'
};

exports.Prisma.Tipos_nominaScalarFieldEnum = {
  id: 'id',
  tiponomina: 'tiponomina',
  descripcion: 'descripcion'
};

exports.Prisma.UsuariosScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password_hash: 'password_hash',
  rol: 'rol',
  estatus: 'estatus',
  tipo: 'tipo',
  creado_en: 'creado_en',
  actualizado_en: 'actualizado_en'
};

exports.Prisma.Usuarios_sesionesScalarFieldEnum = {
  id: 'id',
  usuario_id: 'usuario_id',
  token: 'token',
  creado_en: 'creado_en',
  expiracion: 'expiracion'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  bancos_sat: 'bancos_sat',
  categorias: 'categorias',
  conceptos_nomina: 'conceptos_nomina',
  departamentos: 'departamentos',
  descuentos_activos: 'descuentos_activos',
  empleado_compensacion: 'empleado_compensacion',
  empleado_cuenta_bancaria: 'empleado_cuenta_bancaria',
  empleado_direccion: 'empleado_direccion',
  empleado_documentacion: 'empleado_documentacion',
  empleado_formacion_academica: 'empleado_formacion_academica',
  empleado_informacion_laboral: 'empleado_informacion_laboral',
  empleado_telefono: 'empleado_telefono',
  empleados: 'empleados',
  incidencias_nomina: 'incidencias_nomina',
  niveles_empleados: 'niveles_empleados',
  nominas: 'nominas',
  nominas_empleados: 'nominas_empleados',
  nominas_empleados_incidencias: 'nominas_empleados_incidencias',
  parametros_nomina: 'parametros_nomina',
  periodos_nomina: 'periodos_nomina',
  prenominas: 'prenominas',
  prenominas_empleados: 'prenominas_empleados',
  prenominas_incidencias: 'prenominas_incidencias',
  prestaciones_empleados: 'prestaciones_empleados',
  tabla_isr: 'tabla_isr',
  tipos_empleado: 'tipos_empleado',
  tipos_nomina: 'tipos_nomina',
  usuarios: 'usuarios',
  usuarios_sesiones: 'usuarios_sesiones'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
